{"version":3,"sources":["Components/EditPage/JSONSchema/model/Schema.ts","Components/EditPage/JSONSchema/model/Action.ts","Components/EditPage/JSONSchema/model/base.ts","Components/EditPage/JSONSchema/model/Icon.ts","Components/EditPage/JSONSchema/Components/JSONSchemaTextField.tsx","Components/EditPage/JSONSchema/Components/JSONSchemaSelectField.tsx","Components/EditPage/JSONSchema/Components/JSONSchemaForignField.tsx","Components/EditPage/JSONSchema/JSONSchema.tsx","Components/Survey/UserSelections/config.ts","Components/models/userState.tsx","Components/Login/Login.tsx","Components/Home/ProjectCard.tsx","Components/Home/Home.tsx","Components/Survey/UserSelections/editor/base.ts","Components/Survey/UserSelections/editor/selection.ts","Components/Survey/UserSelections/editor/questions.ts","Components/Survey/UserSelections/editor/maker.ts","Components/models/editState.tsx","Components/EditPage/SelectionDisplay.tsx","Components/EditPage/components/EditQuestionPopup.tsx","Components/EditPage/components/AddDialog.tsx","Components/EditPage/QuestionDisplay.tsx","Components/EditPage/components/PopupMenu.tsx","Components/EditPage/components/FloatButton.tsx","Components/Survey/UserSelections/player/question.ts","Components/Survey/UserSelections/player/selection.ts","Components/Survey/UserSelections/player/base.ts","Components/Survey/UserSelections/player/UserSelections.ts","Components/EditPage/TreeView.tsx","Components/EditPage/EditPage.tsx","Components/Login/SignUp.tsx","serviceWorker.js","index.js","App.tsx"],"names":["Widget","ActionTypes","ActionDone","SchemaList","schemas","schemaList","forEach","s","extra","default","value","this","values","map","name","widget","select","choice","choices","find","c","foreignkey","maps","filter","readonly","tomanyTable","BaseExtra","schemaName","FieldAction","t","d","n","actionTypes","actionDone","f","action","FieldIcon","i","iconData","icon","JSONSchemaTextField","props","schema","onSaved","hasError","required","undefined","content","pointing","validations","length","maximum","Form","TextArea","data-testid","label","error","onChange","e","defaultValue","help","Label","color","Input","type","includes","control","JSONSchemaSelectField","Select","options","text","key","placeholder","JSONSchemaForignField","url","useState","list","setList","editSchema","setSchema","selected","setSelect","setLoading","openDialogIndex","setOpen","getURL","path","fetchList","a","related_model","replace","axios","get","response","data","fetchSchema","request","method","fields","update","patch","create","post","Row","columns","Column","width","Dropdown","labeled","fluid","search","selection","l","id","onClick","result","Button","disabled","Dialog","open","onClose","fullWidth","DialogTitle","DialogContent","onSubmit","tag","JSONSchema","v","number","parseInt","setState","state","submitSuccess","loading","icons","actions","merge","newSchema","Container","basic","Field","renderField","Component","base","config","baseURL","signUpURL","signInURL","token","sessionStorage","getItem","UserProvider","signIn","args","errMsgs","setItem","access","isLogin","msg","signUp","username","password","console","log","signOut","removeItem","UserContext","Provider","children","context","Promise","resolve","React","createContext","useStyles","makeStyles","theme","root","height","image","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","form","marginTop","submit","signInSchema","SignInSide","classes","userContext","useContext","signInPanel","Grid","item","xs","sm","md","component","Paper","elevation","square","className","Typography","variant","container","to","k","push","Message","negative","header","renderMsgs","CssBaseline","ProjectCard","title","description","navLink","onDelete","Card","CardContent","CardActions","createStyles","flexGrow","menuButton","marginRight","padding","createMuiTheme","primary","purple","lightBlue","Home","projects","setprojects","show","setShow","isLoading","setisLoading","headers","Authorization","then","res","deleteIndex","index","delete","splice","alert","setTimeout","MuiThemeProvider","AppBar","position","Toolbar","IconButton","edge","aria-label","lg","LinearProgress","Base","object","hasChildren","newData","child","found","findIndex","SelectionMaker","QuestionMaker","selections","build","addChild","toJSON","Maker","questions","question","q","EditProvider","fetchData","anchor","selectedSelectionPosition","selectedSelection","game","closePopUp","maker","fetch","EditContext","SelectionDisplay","editContext","getQuestion","RadioGroup","FormControlLabel","currentTarget","style","Radio","Icon","to_question","EditQuestionPopup","setTitle","setDescription","setImageURL","setIsLoading","close","target","DialogActions","AddDialog","Modal","Content","top","marginBottom","zIndex","card","breakpoints","up","marginLeft","media","paddingTop","floadIcon","QuestionDisplay","editIndex","setEditIndex","openAddSelection","setOpenAddSelection","Fade","in","size","circular","window","confirm","deleteChild","CardMedia","isEnd","Tooltip","as","for_question","popup","PopupMenu","presetValue","presetToQuestion","setSelected","Popper","anchorEl","transition","placement","TransitionProps","timeout","TextField","newGameselection","floatButton","bottom","right","FloatButton","showAdd","setShowEdit","Question","qid","parent","next","time_takes","_isVisited","new_time","sid","deselect","toQuestion","attributes","toTree","nodeSvgShape","shape","shapeProps","r","fill","stroke","SelectionObj","toQuestionID","isSelected","from_question","x","y","UserSelections","currentQuestion","survey_id","user_id","reject","createQuestions","configQuestions","uid","prev_time","update_time","Error","findMax","isFinished","node","questionList","prevParent","m","m_1","findQuestionByID","CenteredTree","treeContainer","dimensions","getBoundingClientRect","translate","overflowX","ref","tc","orientation","Popover","anchorReference","anchorPosition","left","PureComponent","TreeView","json","treeData","setTree","userSelections","us","toTreeData","catch","overflowY","appbar","paddingLeft","EditPage","openTreeview","setopenTreeview","match","params","Progress","Boolean","location","hostname","ReactDOM","render","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.81ab21b9.chunk.js","sourcesContent":["import { FieldIcon } from \"./Icon\";\nimport { FieldAction } from \"./Action\";\nimport { string } from \"prop-types\";\n\n\ninterface Extra {\n    default?: any;\n    help?: string;\n    related_model?: string;\n    choices?: Choice[]\n\n}\n\nexport enum Widget {\n    text = \"text\",\n    number = \"number\",\n    datetime = \"datetime\",\n    foreignkey = \"foreignkey\",\n    unknown = \"unknown\",\n    select = \"select\",\n    tomanyTable = \"tomany-table\"\n}\n\ninterface Validation {\n    length: Length\n\n}\n\nexport interface Choice {\n    label: string;\n    value: any;\n}\n\ninterface Length {\n    maximum?: number;\n    minimum?: number;\n}\n\nexport interface Schema {\n    label: string;\n    readonly: boolean;\n    /// Could be null\n    extra?: Extra;\n    /// Map's key\n    name: string;\n    /// If widget type is not defined in the enum, then\n    /// return widgetType.unknown\n    widget: Widget | string;\n    required: boolean;\n    /// could be null\n    validations?: Validation;\n    /// this is value will be displayed at screen if set,\n    /// else null\n    value?: any;\n    /// Set this value only if the field includes selection\n    choice?: Choice;\n    /// icon for the field\n    /// this will be set through the params of JSONForm widget\n    icon?: FieldIcon;\n    /// action for the field\n    /// this will be set through the params of JSONForm widget\n    action?: FieldAction;\n\n}\n\n\n\nexport class SchemaList {\n\n    schemaList: Schema[];\n\n    constructor(schemas: Schema[]) {\n        schemas.forEach(s => {\n            if (s.extra && s.extra.default) {\n                s.value = s.extra.default\n            }\n        })\n        this.schemaList = schemas;\n    }\n\n    merge(values: { [key: string]: any }) {\n        this.schemaList = this.schemaList.map((s) => {\n            if (values[s.name]) {\n                let value = values[s.name];\n                if (s.widget == Widget.select) {\n                    let choice: Choice | undefined = s.extra\n                        && s.extra.choices\n                        && s.extra.choices.find((c) => c.value === value)\n                    s.choice = choice;\n                } else if (s.widget == Widget.foreignkey) {\n                    let choice: Choice = value;\n                    s.choice = choice;\n                    s.value = value.value;\n                } else {\n                    s.value = value;\n                }\n            }\n            return s;\n        });\n    }\n\n    onSubmit(): { [key: string]: any } {\n        let maps: { [key: string]: any } = {};\n        this.schemaList.filter(s => !s.readonly && s.widget !== Widget.tomanyTable).forEach((s) => maps[s.name] = s.value);\n        return maps;\n\n    }\n\n}\n","import { BaseExtra } from \"./base\";\nimport { Schema } from './Schema';\n\nexport enum ActionTypes {\n    image,\n    qrScan\n}\n\nexport enum ActionDone {\n    getInput,\n    getImage\n}\n\nexport class FieldAction extends BaseExtra<FieldAction>{\n\n    actionTypes: ActionTypes;\n    actionDone: ActionDone;\n    schemaName: string;\n\n    constructor(t: ActionTypes, d: ActionDone, n: string) {\n        super(n);\n        this.schemaName = n;\n        this.actionTypes = t;\n        this.actionDone = d;\n    }\n\n    static merge(schemas: Schema[], values: FieldAction[]): Schema[] {\n        return schemas.map((s) => {\n            values.forEach((f) => {\n                if (f.schemaName == s.name) {\n                    s.action = f;\n                }\n            })\n\n            return s;\n        })\n    }\n\n\n}","import { Schema } from \"./Schema\";\n\nexport abstract class BaseExtra<T> {\n\n    schemaName: string\n\n    constructor(name: string) {\n        this.schemaName = name;\n    }\n\n    /**\n     * Merge with schemas\n     * @param schemas shemas\n     * @param values values you want to merge\n     * @returns new schemas\n     */\n    merge(schemas: [], values: T[]): Schema[] {\n        return []\n    }\n}","import { BaseExtra } from './base';\nimport { Schema } from './Schema';\n\n\nexport class FieldIcon extends BaseExtra<FieldIcon> {\n    iconData: string;\n    schemaName: string;\n\n    constructor(i: string, n: string) {\n        super(n);\n        this.iconData = i;\n        this.schemaName = n;\n    }\n\n    static merge(schemas: Schema[], values: FieldIcon[]): Schema[] {\n        return schemas.map((s) => {\n            values.forEach((f) => {\n                if (f.schemaName == s.name) {\n                    s.icon = f;\n                }\n            })\n            return s;\n        })\n    }\n\n}","import React from \"react\";\nimport { Schema, Widget } from \"../model/Schema\";\nimport { Input, Form, Label } from \"semantic-ui-react\";\n\nexport interface FieldProps {\n  schema: Schema;\n  onSaved(value: any): void;\n}\n\nexport default function JSONSchemaTextField(props: FieldProps) {\n  const { schema, onSaved } = props;\n\n  function hasError() {\n    if (schema.required && schema.value === undefined) {\n      return { content: \"This field is required\", pointing: \"below\" };\n    }\n\n    return;\n  }\n\n  if (\n    schema.validations &&\n    schema.validations.length &&\n    schema.validations.length.maximum &&\n    schema.validations.length.maximum > 300\n  ) {\n    return (\n      <div>\n        <Form.TextArea\n          data-testid=\"input-field\"\n          label={schema.label}\n          error={hasError()}\n          onChange={(e, { value }) => {\n            onSaved(value);\n          }}\n          defaultValue={schema.value}\n        ></Form.TextArea>\n        {schema.extra && schema.extra.help && (\n          <Label color=\"blue\">{schema.extra.help}</Label>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Form.Input\n        data-testid=\"input-field\"\n        type={schema.name.includes(\"password\") ? \"password\" : undefined}\n        control={Input}\n        label={schema.label}\n        error={hasError()}\n        onChange={(e, { value }) => {\n          onSaved(value);\n        }}\n        defaultValue={schema.value}\n      ></Form.Input>\n      {schema.extra && schema.extra.help && (\n        <Label color=\"blue\">{schema.extra.help}</Label>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Schema } from \"../model/Schema\";\nimport { Input, Form, Select } from \"semantic-ui-react\";\nimport { FieldProps } from \"./JSONSchemaTextField\";\n\nexport default function JSONSchemaSelectField(props: FieldProps) {\n  const { schema, onSaved } = props;\n\n  function hasError() {\n    if (schema.required && schema.value === undefined) {\n      return { content: \"This field is required\", pointing: \"below\" };\n    }\n\n    return;\n  }\n\n  const renderOptions = () => {\n    if (schema.extra && schema.extra.choices) {\n      return schema.extra.choices.map(c => {\n        return { text: c.label, value: c.value, key: c.label };\n      });\n    }\n    return [];\n  };\n\n  return (\n    <Form.Select\n      data-testid=\"select-field\"\n      control={Select}\n      label={schema.label}\n      options={renderOptions()}\n      value={schema.value}\n      onChange={(e, { value }) => onSaved(value as string)}\n      placeholder={\n        schema.value ? schema.value : schema.extra && schema.extra.default\n      }\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { FieldProps } from \"./JSONSchemaTextField\";\nimport {\n  Form,\n  Dropdown,\n  Label,\n  Button,\n  Grid,\n  Modal,\n  Header\n} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { Schema, Choice } from \"../model/Schema\";\nimport JSONSchema from \"../JSONSchema\";\nimport { Dialog, DialogContent, DialogTitle } from \"@material-ui/core\";\n\ninterface Props extends FieldProps {\n  url: string;\n  select(choice: Choice): void;\n}\n\nexport default function JSONSchemaForignField(props: Props) {\n  const { schema, onSaved, url } = props;\n  const [list, setList] = useState<any[]>();\n  const [editSchema, setSchema] = useState<Schema[]>();\n  const [selected, setSelect] = useState<number>(\n    schema.choice && schema.choice.value\n  );\n  const [loading, setLoading] = useState(false);\n  const [openDialogIndex, setOpen] = useState(-1);\n\n  function getURL(path?: string) {\n    return `${url}/${path}`;\n  }\n\n  /**\n   * Fetch selection\n   */\n  const fetchList = async () => {\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\"\n      );\n      let response = await axios.get<any[]>(url);\n\n      return response.data;\n    }\n  };\n\n  /**\n   * Fetch schema\n   */\n  const fetchSchema = async () => {\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\"\n      );\n      let response = await axios.request({ method: \"OPTIONS\", url: url });\n      setSchema(response.data.fields);\n    }\n  };\n\n  /**\n   * Update forign key\n   * @param data json data\n   */\n  const update = async (data: any) => {\n    setLoading(true);\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\" + selected + \"/\"\n      );\n      let response = await axios.patch(url, data);\n    }\n    setLoading(false);\n  };\n\n  /**\n   * Create forign key\n   * @param data JSon Data\n   */\n  const create = async (data: any) => {\n    setLoading(true);\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\"\n      );\n      let response = await axios.post(url, data);\n    }\n    setLoading(false);\n  };\n\n  const options = () => {\n    if (list !== undefined) {\n      return list.map(l => {\n        return { key: l.id, text: l.name, value: l.id };\n      });\n    } else {\n      if (schema.choice) {\n        return [\n          {\n            text: schema.choice.label,\n            key: schema.choice.value,\n            value: schema.choice.value\n          }\n        ];\n      } else {\n        return [];\n      }\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Row columns=\"equal\">\n        <Grid.Column width={10}>\n          <Dropdown\n            value={schema.choice && schema.choice.value}\n            labeled\n            placeholder={`Select ${schema.label}`}\n            fluid\n            search\n            selection\n            onChange={(e, { value }) => {\n              setSelect(value as number);\n              onSaved(value as string);\n              if (list) {\n                let selected = list.find(l => l.id === value);\n                props.select({ label: selected.name, value: selected.id });\n              }\n            }}\n            options={options()}\n            onClick={async () => {\n              let result = await fetchList();\n              if (result) {\n                setList(result);\n              }\n            }}\n          />\n        </Grid.Column>\n        <Grid.Column>\n          <Button\n            icon=\"add\"\n            color=\"blue\"\n            onClick={async () => {\n              setOpen(0);\n              await fetchSchema();\n            }}\n          ></Button>\n          <Button\n            icon=\"edit\"\n            color=\"blue\"\n            disabled={schema.value === undefined}\n            onClick={async () => {\n              setOpen(1);\n              let list = await fetchList();\n              setList(list);\n              await fetchSchema();\n            }}\n          ></Button>\n          <Dialog\n            open={openDialogIndex === 0}\n            onClose={() => setOpen(-1)}\n            fullWidth\n          >\n            <DialogTitle>Add {schema.label}</DialogTitle>\n            <DialogContent>\n              {editSchema && (\n                <JSONSchema\n                  schemas={editSchema}\n                  url={url}\n                  onSubmit={create}\n                ></JSONSchema>\n              )}\n            </DialogContent>\n          </Dialog>\n\n          <Dialog\n            open={openDialogIndex === 1}\n            onClose={() => setOpen(-1)}\n            fullWidth\n          >\n            <DialogTitle>Edit {schema.label}</DialogTitle>\n            <DialogContent>\n              {editSchema && (\n                <JSONSchema\n                  schemas={editSchema}\n                  values={list && list.find(l => l.id === selected)}\n                  url={url}\n                  onSubmit={update}\n                ></JSONSchema>\n              )}\n            </DialogContent>\n          </Dialog>\n        </Grid.Column>\n        {schema.required && !schema.value && (\n          <Grid.Column>\n            <Label tag color=\"red\">\n              Required\n            </Label>\n          </Grid.Column>\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Schema, SchemaList, Widget } from \"./model/Schema\";\nimport { FieldAction } from \"./model/Action\";\nimport { FieldIcon } from \"./model/Icon\";\nimport { Form, Button, Container, Label } from \"semantic-ui-react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport JSONSchemaTextField from \"./Components/JSONSchemaTextField\";\nimport JSONSchemaSelectField from \"./Components/JSONSchemaSelectField\";\nimport JSONSchemaForignField from \"./Components/JSONSchemaForignField\";\n\ninterface Props {\n  schemas: Schema[] | any;\n  values?: { [key: string]: any };\n  actions?: FieldAction[];\n  icons?: FieldIcon[];\n  url: string;\n  onSubmit?(data: { [key: string]: any }): Promise<void>;\n}\n\ninterface State {\n  schemaList?: SchemaList;\n  submitSuccess?: boolean;\n  loading: boolean;\n}\n\nexport default class JSONSchema extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      schemaList: undefined,\n      submitSuccess: undefined,\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    const { schemas, values, icons, actions } = this.props;\n    let schemaList: SchemaList = new SchemaList(schemas);\n\n    if (values) {\n      schemaList.merge(values);\n    }\n    if (icons) {\n      let newSchema = FieldIcon.merge(schemaList.schemaList, icons);\n      schemaList.schemaList = newSchema;\n    }\n    if (actions) {\n      let newSchema = FieldAction.merge(schemaList.schemaList, actions);\n      schemaList.schemaList = newSchema;\n    }\n    this.setState({ schemaList: schemaList });\n  }\n\n  /**\n   * Onsave\n   */\n  onSaved = (value: string, schema: Schema) => {\n    let v: any = value;\n    if (schema.widget === Widget.number) {\n      v = parseInt(value);\n    }\n    schema.value = v;\n    this.setState({\n      schemaList: this.state.schemaList\n    });\n  };\n\n  /**\n   * render field based on schema's type\n   * @param schema Schema\n   */\n  renderField(schema: Schema) {\n    switch (schema.widget) {\n      case Widget.select:\n        return (\n          <JSONSchemaSelectField\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n          ></JSONSchemaSelectField>\n        );\n      case Widget.foreignkey:\n        return (\n          <JSONSchemaForignField\n            select={choice => {\n              schema.choice = choice;\n              this.setState({\n                schemaList: this.state.schemaList\n              });\n            }}\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n            url={this.props.url}\n          ></JSONSchemaForignField>\n        );\n      case Widget.text:\n        return (\n          <JSONSchemaTextField\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n          />\n        );\n      case Widget.number:\n        return (\n          <JSONSchemaTextField\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n          />\n        );\n      default:\n        return <div key={schema.name}></div>;\n    }\n  }\n\n  render() {\n    const { schemaList, submitSuccess, loading } = this.state;\n\n    return (\n      <Container>\n        {submitSuccess !== undefined && (\n          <Label basic color={submitSuccess ? \"green\" : \"red\"}>\n            Submitted {submitSuccess ? \"success\" : \"failed\"}\n          </Label>\n        )}\n        <Form loading={loading}>\n          {schemaList &&\n            schemaList.schemaList\n              .filter(s => !s.readonly)\n              .map(s => (\n                <Form.Field key={s.name}>{this.renderField(s)}</Form.Field>\n              ))}\n          <Button\n            loading={loading}\n            onClick={async () => {\n              this.setState({\n                loading: true\n              });\n              if (schemaList && this.props.onSubmit) {\n                try {\n                  let data = schemaList.onSubmit();\n                  await this.props.onSubmit(data);\n                  this.setState({ submitSuccess: true });\n                } catch (e) {\n                  this.setState({ submitSuccess: false });\n                } finally {\n                  this.setState({ loading: false });\n                }\n              }\n            }}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Container>\n    );\n  }\n}\n","let base = 'https://toebpt5v9j.execute-api.us-east-1.amazonaws.com/dev'\n\nexport const config = {\n    baseURL: `${base}`,\n    signUpURL: `${base}/account/register/`,\n    signInURL: `${base}/api/token/`,\n    token: () => { return sessionStorage.getItem(\"access\") }\n}","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { config } from \"../Survey/UserSelections/config\";\n\ninterface User {\n  userName: string;\n}\n\ninterface ErrorMsg {\n  signIn?: { [key: string]: any };\n  signUp?: { [key: string]: string[] };\n}\n\ninterface UserState {\n  user?: User;\n  isLogin: boolean;\n  errMsgs: ErrorMsg;\n  signIn(args: any): Promise<void>;\n  signUp(args: any): Promise<void>;\n  signOut(): void;\n}\n\ninterface UserProps {}\n\nexport class UserProvider extends Component<UserProps, UserState> {\n  constructor(props: UserProps) {\n    super(props);\n    this.state = {\n      isLogin: false,\n      errMsgs: {},\n      signIn: this.signIn,\n      signUp: this.signUp,\n      signOut: this.signOut\n    };\n  }\n\n  componentDidMount() {\n    if (sessionStorage.getItem(\"access\")) {\n      this.setState({ isLogin: true });\n    }\n  }\n\n  /**\n   * Sign In\n   */\n  signIn = async (args: any) => {\n    let errMsgs = this.state.errMsgs;\n    try {\n      const { signInURL } = config;\n      let response = await axios.post<{ refresh: string; access: string }>(\n        signInURL,\n        args\n      );\n      // store the token\n      sessionStorage.setItem(\"access\", response.data.access);\n      this.setState({ errMsgs: {}, isLogin: true });\n    } catch (err) {\n      let msg: { [key: string]: string[] } = err.response.data;\n\n      errMsgs.signIn = msg;\n      this.setState({ errMsgs });\n    }\n  };\n\n  /**\n   * Sign Up\n   */\n  signUp = async (args: any) => {\n    try {\n      const { signUpURL } = config;\n      let response = await axios.post<{ refresh: string; access: string }>(\n        signUpURL,\n        args\n      );\n      this.setState({ errMsgs: {} });\n      await this.signIn({ username: args.username, password: args.password });\n    } catch (err) {\n      let msg: { [key: string]: string[] } = err.response.data;\n      let errMsgs = this.state.errMsgs;\n      errMsgs.signUp = msg;\n      console.log(errMsgs);\n      this.setState({ errMsgs });\n    }\n  };\n\n  signOut = () => {\n    sessionStorage.removeItem(\"access\");\n    this.setState({ isLogin: false });\n  };\n\n  render() {\n    return (\n      <UserContext.Provider value={this.state}>\n        {this.props.children}\n      </UserContext.Provider>\n    );\n  }\n}\n\nconst context: UserState = {\n  isLogin: false,\n  signIn: () => {\n    return Promise.resolve();\n  },\n  signUp: () => {\n    return Promise.resolve();\n  },\n  signOut: () => {},\n  errMsgs: {}\n};\n\nexport const UserContext = React.createContext(context);\n","import React, { useContext } from \"react\";\nimport {\n  CssBaseline,\n  Grid,\n  Avatar,\n  Typography,\n  makeStyles,\n  Paper,\n  TextField,\n  FormControlLabel,\n  Checkbox,\n  Button\n} from \"@material-ui/core\";\nimport { Schema, Widget } from \"../EditPage/JSONSchema/model/Schema\";\nimport { JSONSchema } from \"../EditPage/JSONSchema\";\nimport { NavLink } from \"react-router-dom\";\nimport { UserContext } from \"../models/userState\";\nimport { Message } from \"semantic-ui-react\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: \"100vh\"\n  },\n  image: {\n    backgroundImage: \"url(https://source.unsplash.com/random)\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\"\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\n\nconst signInSchema: Schema[] = [\n  {\n    name: \"username\",\n    label: \"User Name\",\n    readonly: false,\n    required: true,\n    widget: Widget.text\n  },\n  {\n    name: \"password\",\n    label: \"Password\",\n    readonly: false,\n    required: true,\n    widget: Widget.text\n  }\n];\n\nexport default function SignInSide() {\n  const classes = useStyles();\n  const userContext = useContext(UserContext);\n\n  const { errMsgs } = userContext;\n  const renderMsgs = () => {\n    let list: any[] = [];\n    for (let k in errMsgs[\"signIn\"]) {\n      list.push(\n        <Message\n          key={k}\n          negative\n          header={`${k}`}\n          content={errMsgs.signIn[k]}\n        ></Message>\n      );\n    }\n    return list;\n  };\n  const signInPanel = (\n    <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <JSONSchema\n          schemas={signInSchema}\n          url=\"\"\n          onSubmit={async data => {\n            await userContext.signIn(data);\n          }}\n        ></JSONSchema>\n        <Grid container>\n          <Grid item>\n            <NavLink to=\"/signUp\">\n              <div>{\"Don't have an account? Sign Up\"}</div>\n            </NavLink>\n          </Grid>\n          <Grid item xs={12}>\n            {renderMsgs()}\n          </Grid>\n        </Grid>\n      </div>\n    </Grid>\n  );\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n\n      {signInPanel}\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  CardActions\n} from \"@material-ui/core\";\nimport { NavLink } from \"react-router-dom\";\n\ninterface Props {\n  title: string;\n  description: string;\n  navLink: string;\n  onDelete(): void;\n}\n\nexport default function ProjectCard(props: Props) {\n  const { title, description, navLink, onDelete } = props;\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography component=\"h3\">{title}</Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          {description}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <NavLink to={navLink}>\n          <Button>Edit</Button>\n        </NavLink>\n        <Button onClick={onDelete}>Delete</Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  MuiThemeProvider,\n  createMuiTheme\n} from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { purple, lightBlue } from \"@material-ui/core/colors\";\nimport {\n  Grid,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  LinearProgress\n} from \"@material-ui/core\";\nimport ProjectCard from \"./ProjectCard\";\nimport axios from \"axios\";\nimport { config } from \"../Survey/UserSelections/config\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { Schema, Widget } from \"../EditPage/JSONSchema/model/Schema\";\nimport { JSONSchema } from \"../EditPage/JSONSchema\";\nimport { UserContext } from \"../models/userState\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1\n    },\n    display: {\n      padding: 10\n    }\n  })\n);\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: lightBlue\n  }\n});\n\nconst schemas: Schema[] = [\n  {\n    name: \"title\",\n    label: \"Project name\",\n    readonly: false,\n    required: true,\n    widget: Widget.text\n  }\n];\n\ninterface Projects {\n  id: number;\n  title: string;\n}\n\nexport default function Home() {\n  const classes = useStyles();\n  const userContext = useContext(UserContext);\n\n  const [projects, setprojects] = useState<Projects[]>();\n  const [show, setShow] = useState(false);\n  const [isLoading, setisLoading] = useState(false);\n\n  if (!projects) {\n    const { baseURL } = config;\n    let token = sessionStorage.getItem(\"access\");\n    axios\n      .get<Projects[]>(`${baseURL}/game/`, {\n        headers: { Authorization: `Bearer ${token}` }\n      })\n      .then(res => {\n        setprojects(res.data);\n      });\n  }\n\n  const deleteIndex = async (index: number, id: number) => {\n    console.log(index);\n    try {\n      setisLoading(true);\n      const { baseURL } = config;\n      let res = await axios.delete<Projects>(`${baseURL}/game/${id}/`);\n      if (projects) {\n        let deleted = projects.splice(index, 1);\n      }\n    } catch (err) {\n      alert(err);\n    } finally {\n      setTimeout(() => {\n        setisLoading(false);\n        setprojects(projects);\n      }, 200);\n    }\n  };\n\n  const appbar = () => (\n    <AppBar position=\"static\" color=\"primary\">\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          className={classes.menuButton}\n          color=\"inherit\"\n          aria-label=\"menu\"\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" className={classes.title}>\n          Home\n        </Typography>\n        <IconButton color=\"inherit\" onClick={() => setShow(true)}>\n          <AddIcon></AddIcon>\n        </IconButton>\n\n        <IconButton color=\"inherit\" onClick={() => userContext.signOut()}>\n          <ExitToAppIcon></ExitToAppIcon>\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <div className={classes.root}>\n        {appbar()}\n        <Grid container spacing={1} className={classes.display}>\n          {projects &&\n            projects.map((c, index) => (\n              <Grid\n                item\n                xs={6}\n                sm={4}\n                md={3}\n                lg={2}\n                key={`${c.title}-${index}`}\n              >\n                <ProjectCard\n                  title={c.title}\n                  description={\"\"}\n                  onDelete={async () => {\n                    deleteIndex(index, c.id);\n                  }}\n                  navLink={`edit/${c.id as number}`}\n                ></ProjectCard>\n              </Grid>\n            ))}\n        </Grid>\n      </div>\n      <Dialog open={isLoading} fullWidth>\n        <DialogContent>\n          <LinearProgress></LinearProgress>\n        </DialogContent>\n      </Dialog>\n      {show && (\n        <Dialog\n          open={show}\n          onClose={() => {\n            setShow(false);\n          }}\n        >\n          <DialogTitle>Add new project</DialogTitle>\n          <DialogContent>\n            <JSONSchema\n              url=\"\"\n              schemas={schemas}\n              onSubmit={async data => {\n                const { baseURL, token } = config;\n                let res = await axios.post<Projects>(`${baseURL}/game/`, data, {\n                  headers: { Authorization: `Bearer ${token()}` }\n                });\n                if (projects) {\n                  projects.push(res.data);\n                  setprojects(projects);\n                } else {\n                  setprojects([res.data]);\n                }\n                setShow(false);\n              }}\n            ></JSONSchema>\n          </DialogContent>\n        </Dialog>\n      )}\n    </MuiThemeProvider>\n  );\n}\n","import { config } from '../config';\nimport axios from \"axios\"\n\n\n\nexport abstract class Base<T, K>{\n\n    /**\n     * We will use this path to delete, update, create\n     */\n    path: string;\n    /**\n     * Created object's data\n     */\n    object?: T;\n    /**\n     * Children objects\n     */\n    children: K[];\n    /**\n     * If this has objects\n     */\n    hasChildren: boolean;\n\n\n    constructor(args: { path: string, object?: T, hasChildren?: boolean }) {\n        const { path, object, hasChildren } = args\n        this.path = path;\n        this.object = object;\n        this.children = [];\n        this.hasChildren = hasChildren === undefined\n    }\n\n    /**\n     * Build tree\n     */\n    public abstract toJSON(): T | undefined\n\n    /**\n     * Call this at the begining\n     * @param data Data from internet\n     */\n    public abstract async build(data: T): Promise<Base<T, K>>\n\n    /**\n     * Create new object<T>.\n     * And send it's data to the server\n     */\n    public async create(): Promise<Base<T, K>> {\n        const { baseURL, token } = config\n        let url = `${baseURL}${this.path}/`\n        let result = await axios.post<T>(url, this.object, { headers: { Authorization: `Bearer ${token()}` } })\n        this.object = result.data\n        return this\n    }\n\n\n    /**\n     * Delete object.\n     * And send the deletion request to the server\n     */\n    public async delete(): Promise<Base<T, K>> {\n        const { baseURL, token } = config\n        let url = `${baseURL}${this.path}/${(this.object as any).id}/`\n        let result = await axios.delete<T>(url, { headers: { Authorization: `Bearer ${token()}` } })\n        return this;\n    }\n\n    /**\n     * Update the current object,\n     * and then send the update request to the server\n     * @param newData The object you want to update\n     */\n    public async update(newData: T): Promise<T> {\n        if (this.object) {\n            const { baseURL, token } = config\n            let url = `${baseURL}${this.path}/${(this.object as any).id}/`\n            let result = await axios.patch<T>(url, newData, { headers: { Authorization: `Bearer ${token()}` } })\n            this.object = newData;\n            return result.data;\n        } else {\n            throw (\"No id in objecy\")\n        }\n\n    }\n\n    /**\n     * Add child to children\n     * @param child Child\n     */\n    public async  addChild(child: K): Promise<void> {\n        if (this.hasChildren) {\n            this.children.push(child)\n        }\n    }\n\n    /**\n     * Delete child\n     * @param child Child you want to delete\n     */\n    public async deleteChild(child: K) {\n        if (this.hasChildren) {\n            let found = this.children.findIndex((c) => (c as any).object.id === (child as any).object.id)\n            if (found > -1) {\n                this.children.splice(found, 1)\n            }\n        }\n\n    }\n}","import { GameSelection, GameQuestion } from \"../model/model\";\nimport { Base } from \"./base\";\n\nexport class SelectionMaker extends Base<GameSelection, any>{\n\n    constructor(args: { id?: number, path?: string, object?: GameSelection, hasChildren?: boolean }) {\n        super({ ...args, path: \"/selection\", hasChildren: false })\n    }\n\n    public async build(data: GameSelection): Promise<Base<GameSelection, any>> {\n        this.object = data;\n        return this;\n    }\n\n    public toJSON(): GameSelection | undefined {\n        return this.object;\n    }\n\n\n}","import { Base } from \"./base\";\nimport { GameQuestion } from \"../model/model\";\nimport { SelectionMaker } from \"./selection\";\n\nexport class QuestionMaker extends Base<GameQuestion, SelectionMaker>{\n\n\n    constructor(args: { id?: number, path?: string, object?: GameQuestion, hasChildren?: boolean }) {\n        super({ ...args, path: \"/question\" })\n    }\n\n    public async build(data: GameQuestion): Promise<Base<GameQuestion, SelectionMaker>> {\n        data.selections && data.selections.forEach((selection) => {\n            let s = new SelectionMaker({});\n            s.build(selection)\n            this.addChild(s)\n        })\n\n        this.object = { ...data, selections: undefined };\n        return this\n    }\n\n    public toJSON(): GameQuestion | undefined {\n        return { ...this.object, selections: this.children.map((s) => s.toJSON()) } as GameQuestion\n    }\n\n}","import { Base } from \"./base\";\nimport { Game, GameQuestion } from \"../model/model\";\nimport { QuestionMaker } from './questions';\n\n\nexport class Maker extends Base<Game, QuestionMaker> {\n\n    constructor(args: { id?: number, path?: string, object?: Game, hasChildren?: boolean }) {\n        super({ ...args, path: \"/game\" })\n    }\n\n    public async build(data: Game): Promise<Base<Game, QuestionMaker>> {\n\n        data.questions && data.questions.forEach(async (question) => {\n            let q = new QuestionMaker({})\n            q.build(question)\n            await this.addChild(q)\n        })\n\n        this.object = { ...data, questions: undefined }\n        return this;\n    }\n\n    public toJSON(): Game | undefined {\n        return { ...this.object, questions: this.children.map((q) => q.toJSON()) } as Game\n    }\n\n}","import React, { Component } from \"react\";\nimport { Game } from \"../Survey/UserSelections/model/model\";\nimport { Maker } from \"../Survey/UserSelections/editor/maker\";\nimport { SelectionMaker } from \"../Survey/UserSelections/editor/selection\";\nimport axios from \"axios\";\nimport { getURL } from \"../settings\";\nimport { config } from \"../Survey/UserSelections/config\";\n\ninterface EditState {\n  game?: Maker;\n  selectedSelectionPosition?: HTMLElement;\n  selectedSelection?: SelectionMaker;\n  build(data: Game): Promise<void>;\n  closePopUp(): void;\n  select(\n    anchor: HTMLElement | undefined,\n    selection: SelectionMaker | undefined\n  ): void;\n  update(data: Maker): void;\n  fetch(id: number): Promise<void>;\n}\n\ninterface EditProps {}\n\nconst data = {\n  id: 1,\n  title: \"Test Survey\",\n  create_at: \"2019\",\n  questions: [\n    {\n      id: 1,\n      title: \"Test Question 1\",\n      description: \"test question\",\n      image:\n        \"https://cdn.vox-cdn.com/thumbor/WlSQzgnWqpsktGQblwuHk8VCtJE=/1400x1400/filters:format(png)/cdn.vox-cdn.com/uploads/chorus_asset/file/15961732/2019_03_14_at_9.01_AM.png\",\n      selections: [\n        {\n          id: 1,\n          title: \"To question 2\",\n          to_question: 2\n        },\n        {\n          id: 2,\n          title: \"To question 3\",\n          to_question: 3\n        }\n      ]\n    },\n    {\n      id: 2,\n      title: \"Test Question 2\",\n      description: \"test question\",\n      image:\n        \"https://cdn.vox-cdn.com/thumbor/WlSQzgnWqpsktGQblwuHk8VCtJE=/1400x1400/filters:format(png)/cdn.vox-cdn.com/uploads/chorus_asset/file/15961732/2019_03_14_at_9.01_AM.png\",\n      selections: [\n        {\n          id: 3,\n          title: \"To question 3\",\n          to_question: 3\n        },\n        {\n          id: 4,\n          title: \"Finished\"\n        }\n      ]\n    },\n    {\n      id: 3,\n      title: \"Last question\",\n      description: \"test question\",\n      selections: []\n    }\n  ]\n};\n\nexport class EditProvider extends Component<EditProps, EditState> {\n  constructor(props: EditProps) {\n    super(props);\n    this.state = {\n      build: this.build,\n      select: this.select,\n      closePopUp: this.closePopUp,\n      update: this.update,\n      fetch: this.fetchData\n    };\n  }\n\n  /**\n   * Fetch data from internet\n   */\n  fetchData = async (id: number) => {\n    // TODO\n    const { baseURL } = config;\n    let url = `${baseURL}/game/${id}/`;\n    let response = await axios.get<Game>(url);\n    console.log(response.data);\n    await this.build(response.data);\n  };\n\n  /**\n   * when user select the choice\n   */\n  select = (\n    anchor: HTMLElement | undefined,\n    selection: SelectionMaker | undefined\n  ) => {\n    this.setState({ selectedSelectionPosition: undefined });\n    setTimeout(() => {\n      this.setState({\n        selectedSelectionPosition: anchor,\n        selectedSelection: selection\n      });\n    }, 10);\n  };\n\n  /**\n   * Update the game object\n   */\n  update = (data: Maker) => {\n    this.setState({ game: data });\n  };\n\n  /**\n   * Close user selection pannel\n   */\n  closePopUp = () => {\n    this.setState({\n      selectedSelectionPosition: undefined\n    });\n  };\n\n  build = async (data: Game): Promise<void> => {\n    let maker = new Maker({});\n    await maker.build(data);\n    this.setState({\n      game: maker\n    });\n  };\n\n  render() {\n    return (\n      <EditContext.Provider value={this.state}>\n        {this.props.children}\n      </EditContext.Provider>\n    );\n  }\n}\n\nconst context: EditState = {\n  build: (data: Game) => {\n    return Promise.resolve();\n  },\n  select: (e: HTMLElement, s: SelectionMaker) => {},\n  closePopUp: () => {},\n  update: () => {},\n  fetch: () => {\n    return Promise.resolve();\n  }\n};\n\nexport const EditContext = React.createContext(context);\n","import React, { useContext, useState } from \"react\";\nimport {\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  Popper,\n  Fade,\n  Paper,\n  Typography\n} from \"@material-ui/core\";\nimport { QuestionMaker } from \"../Survey/UserSelections/editor/questions\";\nimport classes from \"*.module.css\";\nimport { EditContext } from \"../models/editState\";\nimport { Icon, Button } from \"semantic-ui-react\";\nimport { SelectionMaker } from \"../Survey/UserSelections/editor/selection\";\nimport { GameQuestion } from \"../Survey/UserSelections/model/model\";\n\ninterface Props {\n  question: QuestionMaker;\n}\n\nexport default function SelectionDisplay(props: Props) {\n  const { question } = props;\n  const editContext = useContext(EditContext);\n  const { selectedSelection, game, update } = editContext;\n  /**\n   * Selection is selected\n   * @param id selected selection's id\n   */\n  const isSelected = (id: number | undefined): boolean => {\n    if (selectedSelection && selectedSelection.object && id) {\n      if (selectedSelection.object.id === id) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Get question' s title based on id\n   * @param id to question\n   */\n  const getQuestion = (id: number): string => {\n    if (game) {\n      let q = game.children.find(q => q.object && q.object.id === id);\n      if (q && q.object) {\n        return q.object.title;\n      }\n    }\n    return \"\";\n  };\n\n  return (\n    <div>\n      <RadioGroup>\n        {question.children.map(s => (\n          <FormControlLabel\n            onClick={e => {\n              editContext.select(e.currentTarget, s);\n            }}\n            style={{\n              backgroundColor: isSelected(s.object && s.object.id)\n                ? \"yellow\"\n                : undefined\n            }}\n            key={s.object && s.object.id}\n            value={s.object && s.object.title}\n            control={<Radio />}\n            label={\n              <Typography>\n                {s.object && s.object.title} <Icon name=\"linkify\"></Icon>\n                {game &&\n                  s.object &&\n                  s.object.to_question &&\n                  getQuestion(s.object.to_question)}\n              \n              </Typography>\n            }\n          />\n        ))}\n      </RadioGroup>\n    </div>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport { QuestionMaker } from \"../../Survey/UserSelections/editor/questions\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  DialogActions\n} from \"@material-ui/core\";\nimport { Button, Input, TextArea, Form, Label } from \"semantic-ui-react\";\nimport { GameQuestion } from \"../../Survey/UserSelections/model/model\";\nimport { EditContext } from \"../../models/editState\";\n\ninterface Props {\n  question: QuestionMaker;\n  open: boolean;\n  close(): void;\n}\n\nexport default function EditQuestionPopup(props: Props) {\n  const [title, setTitle] = useState<string>();\n  const [description, setDescription] = useState<string>();\n  const [image, setImageURL] = useState<string>();\n  const [isLoading, setIsLoading] = useState(false);\n  const editContext = useContext(EditContext);\n  const { open, question, close } = props;\n  const { game, update } = editContext;\n\n  return (\n    <Dialog open={open} onClose={close} fullWidth >\n      <DialogTitle>Edit {question.object && question.object.title}</DialogTitle>\n      <DialogContent>\n        <Form>\n          <Input\n            fluid\n            label=\"Title\"\n            defaultValue={question.object && question.object.title}\n            onChange={e => setTitle(e.target.value)}\n          ></Input>\n          <TextArea\n            style={{ marginTop: 10 }}\n            fullWidth\n            defaultValue={question.object && question.object.description}\n            onChange={(e, { value }) => setDescription(value as string)}\n          ></TextArea>\n          <Input\n            fluid\n            style={{ marginTop: 10 }}\n            label=\"Image\"\n            defaultValue={question.object && question.object.image}\n            onChange={e => setImageURL(e.target.value)}\n          ></Input>\n        </Form>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={close}>Close</Button>\n        <Button\n          loading={isLoading}\n          color=\"green\"\n          onClick={async () => {\n            if (question.object && game) {\n              setIsLoading(true);\n              let object: GameQuestion = {\n                ...question.object,\n                title: title ? title : question.object.title,\n                description: description\n                  ? description\n                  : question.object.description,\n                image: image ? image : question.object.image\n              };\n              question.object = object;\n              await question.update(object);\n              update(game);\n              close();\n              setIsLoading(false);\n            }\n          }}\n        >\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Dialog, DialogTitle, DialogContent } from \"@material-ui/core\";\nimport JSONSchema from \"../JSONSchema/JSONSchema\";\nimport { Schema } from \"../JSONSchema/model/Schema\";\nimport { Modal } from \"semantic-ui-react\";\n\ninterface Props {\n  open: boolean;\n  title: string;\n  onClose?(): void;\n  onSubmit?(data: { [key: string]: any }): Promise<void>;\n  schemas: Schema[];\n}\n\nexport default function AddDialog(props: Props) {\n  const { open, onClose, onSubmit, schemas, title } = props;\n  return (\n    <Modal open={open} onClose={onClose}>\n      <DialogTitle>{title}</DialogTitle>\n      <Modal.Content>\n        <JSONSchema schemas={schemas} onSubmit={onSubmit} url=\"\"></JSONSchema>\n      </Modal.Content>\n    </Modal>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { EditContext } from \"../models/editState\";\nimport SelectionDisplay from \"./SelectionDisplay\";\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  Card,\n  CardContent,\n  Typography,\n  CardMedia,\n  Collapse,\n  Tooltip,\n  Fade\n} from \"@material-ui/core\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport EditQuestionPopup from \"./components/EditQuestionPopup\";\nimport { Button, Label } from \"semantic-ui-react\";\nimport { QuestionMaker } from \"../Survey/UserSelections/editor/questions\";\nimport AddDialog from \"./components/AddDialog\";\nimport { Schema, Widget, Choice } from \"./JSONSchema/model/Schema\";\nimport { SelectionMaker } from \"../Survey/UserSelections/editor/selection\";\nimport {\n  GameSelection,\n  GameQuestion\n} from \"../Survey/UserSelections/model/model\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: \"absolute\",\n      top: 100,\n      marginBottom: 20,\n      width: \"100%\",\n      zIndex: 130\n    },\n    card: {\n      marginTop: 20,\n      [theme.breakpoints.up(\"md\")]: {\n        marginRight: 280,\n        marginLeft: 280\n      },\n      [theme.breakpoints.up(\"lg\")]: {\n        marginRight: 340,\n        marginLeft: 340\n      },\n\n      marginRight: 100,\n      marginLeft: 100\n    },\n    media: {\n      height: 40,\n      marginRight: 40,\n      marginLeft: 40,\n      paddingTop: \"56.25%\" // 16:9\n    },\n    floadIcon: {\n      height: 30,\n      width: 30,\n      margin: \"10px 10px\",\n      color: \"green\"\n    }\n  })\n);\n\nexport default function QuestionDisplay() {\n  const editContext = useContext(EditContext);\n  // Open Edit Question Dialog state\n  const [open, setOpen] = useState<boolean>(false);\n  // Current edit index\n  const [editIndex, setEditIndex] = useState<number>(-1);\n  const [openAddSelection, setOpenAddSelection] = useState(false);\n  //\n  const [isLoading, setisLoading] = useState(false);\n  const { game, update } = editContext;\n  const classes = useStyles();\n\n  /**\n   * To Question choice\n   */\n  const choices =\n    game &&\n    game.children.map(q => {\n      return {\n        label: q.object && q.object.title,\n        value: q.object && q.object.id\n      } as Choice;\n    });\n\n  /**\n   * Add question schema\n   */\n  const schemas: Schema[] = [\n    {\n      name: \"title\",\n      label: \"Question Title\",\n      readonly: false,\n      required: true,\n      widget: Widget.text\n    },\n    {\n      name: \"description\",\n      label: \"Question Description\",\n      readonly: false,\n      required: false,\n      validations: { length: { maximum: 1000 } },\n      widget: Widget.text\n    },\n    {\n      name: \"to_question\",\n      label: \"To Question\",\n      readonly: false,\n      required: false,\n      extra: {\n        choices: choices\n      },\n      validations: { length: { maximum: 1000 } },\n      widget: Widget.select\n    }\n  ];\n\n  /**\n   * If this is the end of the game\n   * @param question\n   */\n  const isEnd = (question: QuestionMaker): boolean => {\n    if (!question.children || question.children.length === 0) return true;\n    for (let selection of question.children) {\n      if (selection.object && !selection.object.to_question) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return (\n    <div className={classes.root}>\n      {game &&\n        game.children.map((c, index) => (\n          <Fade in={true}>\n            <Card className={classes.card}>\n              <CardContent>\n                <Typography component=\"h5\" variant=\"h5\">\n                  {c.object && c.object.title}\n                  <Button\n                    style={{ marginLeft: 10 }}\n                    icon=\"edit\"\n                    size=\"mini\"\n                    circular\n                    onClick={() => {\n                      setOpen(true);\n                      setEditIndex(index);\n                    }}\n                  ></Button>\n                  <Button\n                    style={{ marginLeft: 10 }}\n                    icon=\"add\"\n                    size=\"mini\"\n                    circular\n                    onClick={() => {\n                      setEditIndex(index);\n                      setOpenAddSelection(true);\n                    }}\n                  ></Button>\n                  <Button\n                    style={{ marginLeft: 10 }}\n                    icon=\"trash\"\n                    loading={isLoading}\n                    size=\"mini\"\n                    circular\n                    onClick={async () => {\n                      // Delete the current question\n                      let confirmation = window.confirm(\n                        \"Do you want to delete?\"\n                      );\n                      if (confirmation) {\n                        setisLoading(true);\n                        await c.delete();\n                        if (game) {\n                          await game.deleteChild(c);\n                        }\n                        setisLoading(false);\n                        update(game);\n                      }\n                    }}\n                  ></Button>\n                </Typography>\n\n                <Typography component=\"p\">\n                  {c.object && c.object.description}\n                </Typography>\n                {c.object && c.object.image && (\n                  <CardMedia\n                    className={classes.media}\n                    image={c.object && c.object.image}\n                  ></CardMedia>\n                )}\n                {c && <SelectionDisplay question={c}></SelectionDisplay>}\n              </CardContent>\n              {isEnd(c) ? (\n                <Tooltip title=\"This is the end of the game\">\n                  <Label as=\"a\" color=\"red\" tag style={{ marginBottom: 10 }}>\n                    End\n                  </Label>\n                </Tooltip>\n              ) : null}\n            </Card>\n          </Fade>\n        ))}\n      {game && editIndex >= 0 && (\n        <EditQuestionPopup\n          open={open}\n          close={() => setOpen(false)}\n          question={game.children[editIndex]}\n        ></EditQuestionPopup>\n      )}\n      {openAddSelection && (\n        <AddDialog\n          title=\"Add Selection\"\n          open={openAddSelection}\n          onClose={() => setOpenAddSelection(false)}\n          schemas={schemas}\n          onSubmit={async data => {\n            if (game) {\n              let selection = new SelectionMaker({\n                object: {\n                  ...(data as GameSelection),\n                  for_question: (game.children[editIndex]\n                    .object as GameQuestion).id\n                }\n              });\n              console.log(selection.object);\n              await selection.create();\n              await game.children[editIndex].addChild(selection);\n              setOpenAddSelection(false);\n              update(game);\n            }\n          }}\n        ></AddDialog>\n      )}\n    </div>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { EditContext } from \"../../models/editState\";\nimport {\n  Fade,\n  CardContent,\n  Popper,\n  makeStyles,\n  Theme,\n  createStyles,\n  TextField\n} from \"@material-ui/core\";\nimport { Dropdown, Card, Button } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { GameSelection } from \"../../Survey/UserSelections/model/model\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      marginBottom: 10\n    },\n    popup: {\n      zIndex: 400\n    }\n  })\n);\n\nexport default function PopupMenu() {\n  const editContext = useContext(EditContext);\n  const classes = useStyles();\n  const {\n    selectedSelection,\n    selectedSelectionPosition,\n    game,\n    closePopUp,\n    update\n  } = editContext;\n  let presetValue: string;\n  let presetToQuestion: number | undefined;\n\n  if (selectedSelection && selectedSelection.object) {\n    presetValue = selectedSelection.object.title;\n    presetToQuestion =\n      selectedSelection.object.to_question === null\n        ? undefined\n        : selectedSelection.object.to_question;\n  }\n\n  const [title, setTitle] = useState<string | undefined>();\n  const [selected, setSelected] = useState<number | undefined>();\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <Popper\n      open={selectedSelectionPosition !== undefined}\n      anchorEl={selectedSelectionPosition}\n      transition\n      placement=\"right\"\n      className={classes.popup}\n    >\n      {({ TransitionProps }) => (\n        <Fade {...TransitionProps} timeout={350}>\n          {selectedSelection &&\n            selectedSelection.object &&\n            game &&\n            game.children && (\n              <Card>\n                <Card.Content>\n                  <TextField\n                    fullWidth\n                    className={classes.title}\n                    label=\"Title\"\n                    defaultValue={presetValue}\n                    onChange={e => {\n                      setTitle(e.target.value);\n                    }}\n                  ></TextField>\n\n                  <Dropdown\n                    defaultValue={presetToQuestion}\n                    search\n                    selection\n                    fluid\n                    placeholder=\"To Question\"\n                    onChange={(e, { value }) => {\n                      setSelected(value as number);\n                    }}\n                    options={game.children.map(question => {\n                      return {\n                        key: question.object && question.object.title,\n                        value: question.object && question.object.id,\n                        text: question.object && question.object.title\n                      };\n                    })}\n                  ></Dropdown>\n                </Card.Content>\n                <Card.Content>\n                  <Button\n                    fluid\n                    onClick={async () => {\n                      let confirm = window.confirm(\"Do you want to delete?\");\n                      if (confirm && game) {\n                        await selectedSelection.delete();\n                        game.children.forEach(async question => {\n                          if (\n                            question.object &&\n                            question.object.id ===\n                              (selectedSelection.object as GameSelection)\n                                .for_question\n                          ) {\n                            await question.deleteChild(selectedSelection);\n                            closePopUp();\n                            closePopUp();\n                            return;\n                          }\n                        });\n                      }\n                    }}\n                  >\n                    Remove\n                  </Button>\n                </Card.Content>\n                <Card.Content extra>\n                  <Button\n                    basic\n                    loading={isLoading}\n                    color=\"green\"\n                    onClick={async () => {\n                      setIsLoading(true);\n                      if (selectedSelection && selectedSelection.object) {\n                        let newGameselection: GameSelection = {\n                          ...selectedSelection.object,\n                          title: title ? title : presetValue,\n                          to_question: selected ? selected : presetToQuestion\n                        };\n                        selectedSelection.object = newGameselection;\n                        await selectedSelection.update(newGameselection);\n                        update(game);\n                      }\n                      setIsLoading(false);\n                      closePopUp();\n                    }}\n                  >\n                    Submit\n                  </Button>\n                  <Button\n                    basic\n                    color=\"red\"\n                    onClick={() => {\n                      closePopUp();\n                    }}\n                  >\n                    Close\n                  </Button>\n                </Card.Content>\n              </Card>\n            )}\n        </Fade>\n      )}\n    </Popper>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { EditContext } from \"../../models/editState\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  Dialog,\n  DialogTitle\n} from \"@material-ui/core\";\nimport { Schema, Widget } from \"../JSONSchema/model/Schema\";\nimport AddDialog from \"./AddDialog\";\nimport { QuestionMaker } from \"../../Survey/UserSelections/editor/questions\";\nimport { GameQuestion } from \"../../Survey/UserSelections/model/model\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    floatButton: {\n      position: \"fixed\",\n      bottom: 50,\n      right: 50,\n      zIndex: 300\n    }\n  })\n);\n\nconst schemas: Schema[] = [\n  {\n    name: \"title\",\n    label: \"Question Title\",\n    readonly: false,\n    required: true,\n    widget: Widget.text\n  },\n  {\n    name: \"description\",\n    label: \"Question Description\",\n    readonly: false,\n    required: false,\n    validations: { length: { maximum: 1000 } },\n    widget: Widget.text\n  },\n  {\n    name: \"image\",\n    label: \"Image URL\",\n    readonly: false,\n    required: false,\n    validations: { length: { maximum: 200 } },\n    widget: Widget.text\n  }\n];\n\nexport default function FloatButton() {\n  const classes = useStyles();\n  const editContext = useContext(EditContext);\n  const [showAdd, setShowEdit] = useState(false);\n  const { game, update } = editContext;\n\n  return (\n    <div className={classes.floatButton}>\n      <Button\n        color=\"blue\"\n        onClick={() => {\n          setShowEdit(true);\n        }}\n      >\n        <Icon name=\"edit\"></Icon>\n        Edit\n      </Button>\n      {showAdd && (\n        <AddDialog\n          open={showAdd}\n          schemas={schemas}\n          title=\"Add Question\"\n          onClose={() => setShowEdit(false)}\n          onSubmit={async data => {\n            if (game) {\n              let question = new QuestionMaker({\n                object: {\n                  ...(data as GameQuestion),\n                  game: game.object && game.object.id\n                }\n              });\n\n              await question.create();\n\n              game.addChild(question);\n              update(game);\n              setShowEdit(false);\n            }\n          }}\n        ></AddDialog>\n      )}\n    </div>\n  );\n}\n","import { SelectionObj } from './selection';\nimport { TreeData } from './UserSelections';\n\n\nexport class Question {\n    /**\n     *  Question title\n     */\n    title: string;\n    /**\n     * Question id\n     */\n    qid: number;\n    /**\n     * Question image\n     */\n    image?: string;\n    /**\n     * List of question's selections\n     */\n    selections: SelectionObj[];\n    /**\n     * Which selection has been selected\n     */\n    selected?: SelectionObj;\n    /**\n     * Previous question\n     */\n    parent?: Question\n    /**\n     * Next question\n     */\n    next?: Question\n    /**\n     * Time takes for each question\n     */\n    time_takes: number\n    description: string\n    /**\n     * If the question had been visited before\n     */\n    _isVisited: boolean;\n\n\n    constructor(args: { title: string, description: string, qid: number, image?: string, selections: SelectionObj[] }) {\n        const { title, description, qid, image, selections } = args\n        this.title = title\n        this.description = description\n        this.qid = qid\n        this.image = image\n        this.selections = selections\n        this.selected = undefined\n        this.time_takes = 0\n        this._isVisited = false;\n    }\n\n    /**\n     * Update the time_takes\n     * @param new_time new time\n     */\n    public update_time(new_time: number) {\n        this.time_takes = new_time\n    }\n\n    /**\n     * select one of the selection\n     * and then set the question.next to the selection.toQuestion\n     * @param sid Selection id you want to select\n     */\n    public select(sid: number) {\n        this.deselect();\n        for (let s of this.selections) {\n            if (s.sid === sid) {\n                this.selected = s\n                this.next = s.toQuestion\n                s.select(this)\n            }\n        }\n    }\n\n    private deselect() {\n        if (this.selected) {\n            this.selected.deselect()\n            this.selected = undefined;\n        }\n    }\n\n    public toTree(): TreeData {\n        if (!this._isVisited) {\n            this._isVisited = true;\n            return {\n                name: this.title,\n                attributes: { type: \"Question\", id: this.qid },\n                children: this.selections.map((s) => s.toTree()),\n                nodeSvgShape: {\n                    shape: 'circle',\n                    shapeProps: {\n                        r: 10,\n                        fill: '#26c6da',\n                        stroke: \"white\"\n                    },\n                },\n            }\n        } else {\n            return {\n                name: this.title,\n                attributes: {\n                    // attributes: { type: \"Question\", id: this.qid },\n                    \"IsReplicated\": \"true\"\n                },\n\n            }\n        }\n\n    }\n}","import { Question } from './question';\nimport { BasePlayer } from \"./base\"\nimport { TreeData } from './UserSelections';\n\nexport class SelectionObj extends BasePlayer<Question>{\n    /**\n     *  Next question's id\n     */\n    toQuestionID?: number;\n    toQuestion?: Question;\n    title: string;\n    sid: number;\n    /**\n     * Is this selection has been selected\n     */\n    isSelected: boolean;\n\n    constructor(args: { title: string, sid: number, toQuestionID?: number }) {\n        super();\n        const { title, sid, toQuestionID } = args\n        this.title = title;\n        this.sid = sid;\n        this.toQuestionID = toQuestionID;\n        this.isSelected = false;\n    }\n\n    public select(from_question: Question) {\n        this.isSelected = true\n        if (this.toQuestion) {\n            this.toQuestion.parent = from_question\n        }\n    }\n\n    public deselect() {\n        this.isSelected = false\n        if (this.toQuestion) {\n            if (this.toQuestion.selected) this.toQuestion.selected.isSelected = false\n            this.toQuestion.selected = undefined\n            this.toQuestion.parent = undefined\n            this.toQuestion.next = undefined\n        }\n    }\n\n    public toTree(): TreeData {\n        return {\n            name: this.title,\n            attributes: { \"type\": \"selection\", \"id\": this.sid },\n            children: this.toQuestion ? [this.toQuestion && this.toQuestion.toTree()] : undefined,\n            nodeSvgShape: {\n                shape: 'rect',\n                shapeProps: {\n                    width: 20,\n                    height: 20,\n                    x: -10,\n                    y: -10,\n                    fill: 'purple',\n                    stroke: \"white\"\n                },\n            },\n        }\n    }\n\n}","export abstract class BasePlayer<T>{\n\n    public abstract select(data: T): void\n\n    public abstract deselect(): void;\n\n    \n\n}","import { Question } from './question';\nimport { SelectionObj } from './selection';\nimport { SubmitObject, Game } from '../model/model';\n\nexport interface TreeData {\n    name: string;\n    children?: TreeData[]\n    attributes?: any\n    nodeSvgShape?: any\n}\n\n/**\n * Create selection objects from online data.\n * Allow user to make selection, go to next question,\n * and save selections\n */\nexport class UserSelections {\n    /**\n     * The current question\n     */\n    currentQuestion?: Question\n    /**\n     * Root of the tree\n     */\n    root?: Question\n    /**\n     * Survey's title\n     */\n    title?: string\n    /**\n     * Survey's sid\n     */\n    survey_id?: number\n    /**\n     * Survey's user id\n     */\n    user_id?: number\n\n    /**\n     * Set the data and build the tree.\n     * This will be called when survey data is received.\n     * Call this first\n     * @param data Survey data\n     */\n    public async build(data: Game): Promise<UserSelections> {\n        return new Promise((resolve, reject) => {\n            this.title = data.title\n            // Question list\n            let questions: Question[] = []\n            this.createQuestions(data, questions);\n            this.configQuestions(questions)\n            this.currentQuestion = questions[0]\n            this.root = questions[0]\n            resolve(this)\n        })\n    }\n\n    /**\n     * Render tree data\n     */\n    public async toTreeData(): Promise<TreeData> {\n        return new Promise((resolve, reject) => {\n            if (this.root) {\n                let treeData = this.root.toTree()\n                resolve(treeData)\n            }\n        })\n    }\n\n    /**\n     * \n     * @param uid user ID\n     */\n    public setUserID(uid: number): UserSelections {\n        this.user_id = uid\n        return this\n    }\n\n    /**\n     * To the next page\n     */\n    public next(time_takes: number = 0): void {\n        if (this.currentQuestion) {\n            let prev_time = this.currentQuestion.time_takes\n            this.currentQuestion.update_time(prev_time + time_takes)\n            this.currentQuestion = this.currentQuestion.next\n        }\n\n    }\n\n    /**\n     * Go to prev page\n     */\n    public prev(): void {\n        this.currentQuestion = this.currentQuestion && this.currentQuestion.parent\n    }\n\n    /**\n     * This method will return true if only if\n     * - all of the selections don't have next question\n     */\n    public isFinished(): boolean {\n        if (this.currentQuestion) {\n            for (let s of this.currentQuestion.selections) {\n                if (s.toQuestion !== undefined) return false\n            }\n        }\n        return true\n    }\n\n    /**\n     * Has next page based on the selection.\n     * If user select nothing, this will return false.\n     * If the selection leads to finished, this returns false,\n     * otherwise, true\n     * @returns true if next question exist\n     */\n    public hasNext(): boolean {\n        return (this.currentQuestion && this.currentQuestion.next) !== undefined\n    }\n\n    /**\n     * Has prev page\n     */\n    public hasPrev(): boolean {\n        return (this.currentQuestion && this.currentQuestion.parent) !== undefined\n    }\n\n    /**\n     * Select selection.\n     * When user select any selection, this function will be called\n     * if user selected some option doesn't exist, throw error\n     * @param sid the selection you want to select\n     */\n    public select(sid: number): void {\n        if (this.currentQuestion) {\n            let found = this.currentQuestion.selections.find((s) => s.sid === sid) !== undefined\n            if (!found) {\n                throw new Error(\"Selection not found\")\n            }\n            this.currentQuestion.select(sid)\n        }\n        else {\n            console.log(this.currentQuestion)\n        }\n    }\n\n\n    /**\n     * Get the max depth of the tree based on the current question\n     */\n    public async getMaxDepthOfTree(): Promise<number> {\n        return new Promise((resolve, reject) => {\n            if (this.currentQuestion) {\n                let depth = this.findMax(this.currentQuestion)\n                resolve(depth)\n            }\n            resolve(0)\n        })\n\n    }\n\n    /**\n     * Get list of questions and its selection\n     * for each question which user selected.\n     * This will be called when the survey is finished\n     * @return submitobject\n     */\n    public onSubmit(time_takes?: number): SubmitObject[] {\n        if (!this.isFinished()) {\n            throw new Error(\"Survey is not finished\")\n        }\n        if (this.currentQuestion) {\n            if (time_takes) {\n                this.currentQuestion.update_time(time_takes)\n            }\n\n            let node = this.root\n            let questionList: SubmitObject[] = []\n            while (node !== undefined) {\n                if (node.selected) {\n                    questionList.push({\n                        time_takes: node.time_takes,\n                        sid: node.selected.sid\n                    })\n                }\n                node = node.next\n            }\n            return questionList\n        }\n        return [];\n    }\n\n    /**\n     * Find possible max paths\n     * @param node Current questions\n     * @param prevParent Visited pararents\n     */\n    private findMax(node: Question, prevParent: Question[] = []): number {\n        if (node === undefined) {\n            return 0\n        } else {\n            let m = 0\n            for (let s of node.selections) {\n                if (s.toQuestion) {\n\n                    if (prevParent.includes(s.toQuestion)) {\n                        return m + 1\n                    }\n                    prevParent.push(s.toQuestion)\n                    let m_1 = this.findMax(s.toQuestion, prevParent)\n                    if (m_1 > m) {\n                        m = m_1\n                    }\n                }\n            }\n            return m + 1\n        }\n\n    }\n\n    private findQuestionByID(qid: number, questions: Question[]): Question | undefined {\n        return questions.find((q) => q.qid === qid);\n    }\n\n    /**\n     * \n     * @param questions List of questions\n     */\n    private configQuestions(questions: Question[]): void {\n        questions.forEach((q) => {\n            q.selections.forEach((s) => {\n                if (s.toQuestionID) {\n                    let to_question = this.findQuestionByID(s.toQuestionID, questions)\n                    if (to_question !== undefined) {\n                        s.toQuestion = to_question\n                        to_question.parent = q\n                    }\n                }\n\n            })\n        })\n    }\n\n    /**\n     * Helper function which will\n     * Create Question object\n     * @param data data from server\n     * @param questions an empty question list\n     */\n    private createQuestions(data: Game, questions: Question[]): void {\n        data.questions && data.questions.forEach((q) => {\n            let selections: SelectionObj[] = [];\n            if (q.selections) {\n                for (let s of q.selections) {\n                    if (s.id) {\n                        let selection = new SelectionObj({ title: s.title, sid: s.id, toQuestionID: s.to_question });\n                        selections.push(selection);\n                    }\n\n                }\n            }\n            if (q.id) {\n                let question = new Question({\n                    title: q.title,\n                    description: q.description,\n                    qid: q.id,\n                    image: q.image,\n                    selections: selections\n                })\n                questions.push(question);\n            }\n        })\n    }\n}\n","import React, { useContext, useState } from \"react\";\nimport { EditContext } from \"../models/editState\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogActions,\n  Popper,\n  Paper,\n  Popover\n} from \"@material-ui/core\";\nimport {\n  UserSelections,\n  TreeData\n} from \"../Survey/UserSelections/player/UserSelections\";\nimport Tree from \"react-d3-tree\";\nimport { Button } from \"semantic-ui-react\";\n\nconst containerStyles = {\n  height: \"100vh\",\n  overflowX: \"hidden\"\n};\n\ninterface Props {\n  data: TreeData;\n  onClick(data: any, e: any): void;\n}\n\nclass CenteredTree extends React.PureComponent<Props> {\n  state: {\n    translate?: any;\n    position?: any;\n    qid?: number;\n  } = {};\n  treeContainer: any;\n\n  componentDidMount() {\n    const dimensions = this.treeContainer.getBoundingClientRect();\n    this.setState({\n      translate: {\n        x: dimensions.width * 0.5,\n        y: dimensions.height * 0.05\n      }\n    });\n  }\n\n  render() {\n    const { position, qid } = this.state;\n\n    return (\n      <div\n        style={{ overflowX: \"hidden\", height: \"100%\" }}\n        ref={tc => (this.treeContainer = tc)}\n      >\n        <Tree\n          data={this.props.data}\n          translate={this.state.translate}\n          orientation={\"vertical\"}\n          onClick={this.props.onClick}\n        />\n        {position && (\n          <Popover\n            open={position !== undefined}\n            anchorReference=\"anchorPosition\"\n            anchorPosition={{ top: position.y, left: position.x }}\n          >\n            <Paper>\n              <h4>sadsadadsasd</h4>\n            </Paper>\n          </Popover>\n        )}\n      </div>\n    );\n  }\n}\n\ninterface TreeProps {\n  open: boolean;\n  onClose(): void;\n}\n\nexport default function TreeView(props: TreeProps) {\n  const editContext = useContext(EditContext);\n\n  const { game } = editContext;\n  let json = game && game.toJSON();\n  let [treeData, setTree] = useState<TreeData>();\n  let userSelections = new UserSelections();\n  if (json && !treeData) {\n    userSelections\n      .build(json)\n      .then(async us => {\n        console.log(us);\n        let data = await us.toTreeData();\n        setTree(data);\n      })\n      .catch(e => console.log(e));\n  }\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose} fullWidth>\n      <DialogContent style={{ height: \"100vh\" }}>\n        {treeData && (\n          <CenteredTree\n            data={treeData}\n            onClick={(node: any, e: any) => {\n              console.log(e);\n            }}\n          ></CenteredTree>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => props.onClose()}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  makeStyles,\n  Theme,\n  createStyles,\n  createMuiTheme,\n  MuiThemeProvider,\n  Button,\n  IconButton\n} from \"@material-ui/core\";\nimport { purple, lightBlue } from \"@material-ui/core/colors\";\nimport QuestionDisplay from \"./QuestionDisplay\";\nimport { EditContext } from \"../models/editState\";\nimport PopupMenu from \"./components/PopupMenu\";\nimport FloatButton from \"./components/FloatButton\";\nimport TreeView from \"./TreeView\";\nimport KeyboardArrowLeftIcon from \"@material-ui/icons/KeyboardArrowLeft\";\nimport { NavLink, RouteComponentProps } from \"react-router-dom\";\nimport { RouterProps } from \"react-router\";\nimport { Progress } from \"semantic-ui-react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      overflowY: \"hidden\",\n      height: \"100%\"\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1\n    },\n    display: {\n      padding: 10\n    },\n    appbar: {\n      top: 0,\n      height: 300,\n      zIndex: 10\n    },\n    popup: {\n      paddingLeft: 60,\n      zIndex: 200\n    }\n  })\n);\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: lightBlue\n  }\n});\n\ninterface Props extends RouteComponentProps<{ id: string }> {}\n\nexport default function EditPage(props: Props) {\n  const classes = useStyles();\n  const editContext = useContext(EditContext);\n  const { selectedSelectionPosition, game, fetch } = editContext;\n  const [openTreeview, setopenTreeview] = useState(false);\n  if (\n    !game ||\n    (!game.object || game.object.id !== parseInt(props.match.params.id))\n  ) {\n    fetch(parseInt(props.match.params.id));\n  }\n\n  const appbar = () => (\n    <AppBar color=\"primary\" elevation={0} className={classes.appbar}>\n      <Toolbar>\n        <NavLink to=\"/home\">\n          <IconButton style={{ color: \"white\" }}>\n            <KeyboardArrowLeftIcon></KeyboardArrowLeftIcon>\n          </IconButton>\n        </NavLink>\n\n        <Typography variant=\"h6\" className={classes.title}>\n          Edit {game && game.object && game.object.title}\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n  return (\n    <MuiThemeProvider theme={theme}>\n      {appbar()}\n      {selectedSelectionPosition && <PopupMenu></PopupMenu>}\n      {!game && <Progress></Progress>}\n      {game && <QuestionDisplay></QuestionDisplay>}\n\n      <FloatButton></FloatButton>\n      <Button\n        style={{\n          zIndex: 1000,\n          position: \"fixed\",\n          right: 10,\n          top: 10,\n          color: \"white\"\n        }}\n        onClick={() => setopenTreeview(true)}\n      >\n        Show Tree\n      </Button>\n      {openTreeview && (\n        <TreeView\n          open={openTreeview}\n          onClose={() => setopenTreeview(false)}\n        ></TreeView>\n      )}\n    </MuiThemeProvider>\n  );\n}\n","import React, { useContext } from \"react\";\nimport {\n  CssBaseline,\n  Grid,\n  Typography,\n  makeStyles,\n  Paper\n} from \"@material-ui/core\";\nimport { Schema, Widget } from \"../EditPage/JSONSchema/model/Schema\";\nimport { JSONSchema } from \"../EditPage/JSONSchema\";\nimport { NavLink } from \"react-router-dom\";\nimport { UserContext } from \"../models/userState\";\nimport { Message } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: \"100vh\"\n  },\n  image: {\n    backgroundImage: \"url(https://source.unsplash.com/random)\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\"\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\n\nconst signInSchema: Schema[] = [\n  {\n    name: \"username\",\n    label: \"User Name\",\n    readonly: false,\n    required: true,\n    widget: Widget.text\n  },\n  {\n    name: \"password\",\n    label: \"Password\",\n    readonly: false,\n    required: true,\n    widget: Widget.text\n  },\n  {\n    name: \"password_confirm\",\n    label: \"Password Confirm\",\n    readonly: false,\n    required: true,\n    widget: Widget.text\n  }\n];\n\nexport default function SignInSide() {\n  const classes = useStyles();\n  const userContext = useContext(UserContext);\n\n  const { errMsgs } = userContext;\n  const renderMsgs = () => {\n    let list: any[] = [];\n    for (let k in errMsgs[\"signUp\"]) {\n      list.push(\n        <Message\n          key={k}\n          negative\n          header={`${k}`}\n          list={errMsgs.signUp[k]}\n        ></Message>\n      );\n    }\n    return list;\n  };\n\n  const signInPanel = (\n    <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign Up\n        </Typography>\n        <JSONSchema\n          schemas={signInSchema}\n          url=\"\"\n          onSubmit={async data => {\n            console.log(\"Sign Upo\");\n            await userContext.signUp(data);\n          }}\n        ></JSONSchema>\n        <Grid container>\n          <Grid item>\n            <NavLink to=\"/\">\n              <div>\"Have a account? Sign In\"</div>\n            </NavLink>\n          </Grid>\n          <Grid item xs={12}>\n            {renderMsgs()}\n          </Grid>\n        </Grid>\n      </div>\n    </Grid>\n  );\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n\n      {signInPanel}\n    </Grid>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { UserProvider } from \"./Components/models/userState\";\n\nReactDOM.render(\n  <UserProvider>\n    <App />\n  </UserProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component, useContext } from \"react\";\nimport {\n  HashRouter,\n  BrowserRouter,\n  Route,\n  Link,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport Login from \"./Components/Login/Login\";\nimport Home from \"./Components/Home/Home\";\nimport { EditContext, EditProvider } from \"./Components/models/editState\";\nimport \"./App.css\";\nimport EditPage from \"./Components/EditPage/EditPage\";\nimport SignUpSide from \"./Components/Login/SignUp\";\nimport { UserProvider, UserContext } from \"./Components/models/userState\";\n\nexport default function App() {\n  const userContext = useContext(UserContext);\n  const { isLogin } = userContext;\n  console.log(isLogin);\n\n  return (\n    <EditProvider>\n\n        <HashRouter>\n          <div>\n            <Switch>\n              <Route\n                exact\n                path=\"/\"\n                render={props =>\n                  isLogin ? <Redirect to=\"/home\" /> : <Login />\n                }\n              ></Route>\n              <Route\n                exact\n                path=\"/signUp\"\n                render={props =>\n                  isLogin ? <Redirect to=\"/home\" /> : <SignUpSide />\n                }\n              ></Route>\n              <Route\n                exact\n                path=\"/home\"\n                render={props => (!isLogin ? <Redirect to=\"/\" /> : <Home />)}\n              />\n              <Route\n                exact\n                path=\"/edit/:id\"\n                render={props => <EditPage {...props} />}\n              />\n            </Switch>\n          </div>\n        </HashRouter>\n\n    </EditProvider>\n  );\n}\n"],"sourceRoot":""}